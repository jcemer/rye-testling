// Generated by CoffeeScript 1.4.0
(function() {
  var fs, http, page, parseRequest, path, querystring, request, staticFile, url;

  http = require('http');

  url = require('url');

  path = require('path');

  fs = require('fs');

  querystring = require('querystring');

  page = {
    notFound: function(res, data) {
      res.writeHead(404, {
        'Content-Type': 'text/plain'
      });
      res.write((data || '404 Not Found') + "\n");
      return res.end();
    },
    internalError: function(res, data) {
      res.writeHead(500, {
        'Content-Type': 'text/plain'
      });
      res.write((data || '500 Internal Server Error') + "\n");
      return res.end();
    }
  };

  staticFile = function(res, pathname) {
    var filename, mimeTypes;
    mimeTypes = {
      '.html': 'text/html',
      '.css': 'text/css',
      '.js': 'text/javascript'
    };
    filename = path.join(process.cwd(), pathname);
    return path.exists(filename, function(exists) {
      if (exists) {
        if (fs.statSync(filename).isDirectory()) {
          filename += '/index.html';
        }
        return fs.readFile(filename, 'binary', function(err, file) {
          var contentType, headers;
          if (!err) {
            headers = {};
            contentType = mimeTypes[path.extname(filename)];
            if (contentType) {
              headers['Content-Type'] = contentType;
            }
            res.writeHead(200, headers);
            res.write(file, 'binary');
            return res.end();
          } else {
            return page.internalError(res, err);
          }
        });
      } else {
        return page.notFound(res);
      }
    });
  };

  parseRequest = function(callback) {
    return function(req, res) {
      var queryData;
      req.url = url.parse(req.url, true);
      req.query = req.url.query || {};
      req.body = {};
      if (req.method === 'POST') {
        queryData = '';
        req.on('data', function(data) {
          return queryData += data;
        });
        return req.on('end', function() {
          req.body = querystring.parse(queryData);
          return callback(req, res);
        });
      } else {
        return callback(req, res);
      }
    };
  };

  request = parseRequest(function(req, res) {
    var accept, data, headers, pathname, sleep, status;
    pathname = req.url.pathname;
    status = 200;
    sleep = 0;
    headers = {};
    data = null;
    switch (pathname) {
      case '/echo':
        data = "" + (req.method.toLowerCase()) + " ";
        if (req.method === 'POST') {
          data += req.body.bar || 'no data';
        } else {
          data += req.query.bar || 'no data';
        }
        break;
      case '/status':
        status = req.query.status;
        data = "status " + req.query.status;
        break;
      case '/content':
        data = "content type " + req.headers['content-type'];
        break;
      case '/sleep':
        data = 'sleep';
        sleep = 500;
        break;
      case '/accept':
        accept = req.headers['accept'].split(/[/,]/)[1];
        if (accept === 'plain') {
          accept = 'text';
        }
        switch (accept) {
          case 'html':
          case 'text':
            data = "" + accept + " ok";
            break;
          case 'json':
            headers['Content-Type'] = 'application/json';
            data = JSON.stringify({
              json: 'ok'
            });
            break;
          case 'xml':
            headers['Content-Type'] = 'application/xml, text/xml';
            data = '<?xml version="1.0" encoding="UTF-8" ?><content>ok</content>';
        }
    }
    if (data || sleep) {
      return setTimeout(function() {
        res.writeHead(status, headers);
        res.write(data);
        return res.end();
      }, sleep);
    } else {
      return staticFile(res, pathname);
    }
  });

  module.exports = http.createServer(request);

}).call(this);

module.exports.listen(3000)
